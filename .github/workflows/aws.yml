name: Deploy to Amazon ECS

on:
  push:
    branches: [ "production" ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: laa-dev-app
  ECS_SERVICE: laa-checkout-app
  ECS_CLUSTER: shopifyApp
  ECS_TASK_DEFINITION: .github/workflows/test-tdf-revision2.json

  CONTAINER_NAME: laa-dev-app

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # Push the Docker image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create .env file
      run: |
        echo SHOPIFY_API_KEY=${{ secrets.SHOPIFY_API_KEY }} >> .env
        echo SHOPIFY_API_SECRET=${{ secrets.SHOPIFY_API_SECRET }} >> .env
        echo SCOPES=${{ secrets.SCOPES }} >> .env
        echo AUTHORIZE_NET_API_URL=${{ secrets.AUTHORIZE_NET_API_URL }} >> .env
        echo AUTHORIZE_NET_API_ID=${{ secrets.AUTHORIZE_NET_API_ID }} >> .env
        echo AUTHORIZE_NET_API_KEY=${{ secrets.AUTHORIZE_NET_API_KEY }} >> .env
        echo STOREFRONT_ACCESS_TOKEN=${{ secrets.STOREFRONT_ACCESS_TOKEN }} >> .env
        echo MANDRILL_API_KEY=${{ secrets.MANDRILL_API_KEY }} >> .env

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
